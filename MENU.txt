MENU:

in MainActivity.java
@Override
    public boolean onCreateOptionsMenu(Menu menu){
        MenuInflater inflater =getMenuInflater();
        inflator.inflate(R.menu.new_menu, menu);
        return true;
    }
    @Override
    public boolean onOptionsItemSelected(MenuItem item){
        switch (item.getItemId()){
            case R.id.Item1:
                function1();
                return true;
            case R.id.Item2:
                function2();
                return true;
            case R.id.Item3:
                function3();
                return true;
            case R.id.Item4:
                function4();
                return true;
            default:
                return false;
        }
    }
    void function1(){}
    void function2(){}
    void function3(){}
    void function4(){}

IN RES CREATE NEW ANDROID RESOURCE DIRECTORY
IN THE MENU DIRECTORY CREATED, ADD A NEW XML FILE
IN XML FILE ADD:
<menu xmlns:android="http://schemas.android.com/apk/res/android">
    <group>
        <item android:icon="@color/black"
            android:id="@+id/Item1"
            android:title="Item1"
            ></item>
        <item
            android:icon="@color/material_dynamic_neutral20"
            android:id="@+id/Item2"
            android:title="Item2"
        ></item>
    </group>
    <group>
        <item android:icon="@color/black"
            android:id="@+id/Item3"
            android:title="Item3"
            ></item>
        <item
            android:icon="@color/material_dynamic_neutral20"
            android:id="@+id/Item4"
            android:title="Item4"
            ></item>
    </group>
</menu>







FLOATING CONTEXT MENU:
MainActivity.java

@Override
    public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) {
        super.onCreateContextMenu(menu, v, menuInfo);
        MenuInflater inflater = getMenuInflater();
		//for knowing which item in the page is long pressed
        switch(v.getId()){
            case R.id.txt:
                inflater.inflate(R.menu.new_menu, menu);
                break;
        }

    }

@Override
    public boolean onContextItemSelected(MenuItem item) {
        AdapterView.AdapterContextMenuInfo info = (AdapterView.AdapterContextMenuInfo) item.getMenuInfo();
	//for knowing which item in the menu is clicked
        switch (item.getItemId()) {
            case R.id.Item1:
                function1();
                return true;
            case R.id.Item2:
                function2();
                return true;
            case R.id.Item3:
                function3();
                return true;
            case R.id.Item4:
                function4();
                return true;
            default:
                return false;
        }
    }

IN THE onCreate() we add these lines to make the view for it to be identified.

	TextView textView = findViewById(R.id.txt);
        registerForContextMenu(textView);

IN RES CREATE NEW ANDROID RESOURCE DIRECTORY
IN THE MENU DIRECTORY CREATED, ADD A NEW XML FILE
IN XML FILE ADD:
<menu xmlns:android="http://schemas.android.com/apk/res/android">
    <group>
        <item android:icon="@color/black"
            android:id="@+id/Item1"
            android:title="Item1"
            ></item>
        <item
            android:icon="@color/material_dynamic_neutral20"
            android:id="@+id/Item2"
            android:title="Item2"
        ></item>
    </group>
    <group>
        <item android:icon="@color/black"
            android:id="@+id/Item3"
            android:title="Item3"
            ></item>
        <item
            android:icon="@color/material_dynamic_neutral20"
            android:id="@+id/Item4"
            android:title="Item4"
            ></item>
    </group>
</menu>





CONTEXTUAL ACTION MENU:
in MainActivity.java
private ActionMode mActionMode;
private ActionMode.Callback mActionModeCallback= new ActionMode.Callback(){
       @Override
       public boolean onCreateActionMode(ActionMode mode, Menu menu) {
            // Inflate a menu resource providing context menu items
           MenuInflater inflater = mode.getMenuInflater();
           inflater.inflate(R.menu.new_menu, menu);
		mode.setTitle("Choose your title");
           return true;
       }
       @Override
       public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
           return false; // Return false if nothing is done
       }
       @Override
       public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
           switch (item.getItemId()) {
               case R.id.Item1:
                   function1();
                   mode.finish(); // Action picked, so close the CAB
                   return true;
               default:
                   return false;
           }
       }
       @Override
       public void onDestroyActionMode(ActionMode mode) {
           mActionMode = null;
       }
   };

in the onCreate:
textView.setOnLongClickListener(new View.OnLongClickListener(){
            @Override
            public boolean onLongClick(View v){
                if(mActionMode!=null)
                    return false;
                mActionMode = startActionMode(mActionModeCallback);
                v.setSelected(true);

                return true;
            }
        });




POPUP MENU:
in the MainActivity.java

public void showPopup(View v) {
        PopupMenu popup = new PopupMenu(this, v);
        MenuInflater inflater = popup.getMenuInflater();
        inflater.inflate(R.menu.new_menu, popup.getMenu());
        popup.show();
    }


